// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-05-19 05:51:00.876034831 +1000 AEST m=+0.021706736

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "This service provides four main mathematical operations",
        "title": "Swagger Samples/Calculator API",
        "termsOfService": "http://www.samples.io/terms/",
        "contact": {
            "name": "Samples API Support",
            "url": "http://www.samples.io/support",
            "email": "support@samples.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/",
    "paths": {
        "/api/calc/{op}": {
            "get": {
                "description": "Calculate runs requested operation on input coming in request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Calculate runs requested operation",
                "operationId": "Calculate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operation add|sub|mul|div",
                        "name": "op",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Json representaion of an Input object",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/calc.Input"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/calc.Output"
                        }
                    },
                    "400": {
                        "description": "Provided op xyz is not valid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "It is the health check endpoint",
                "produces": [
                    "text/plain"
                ],
                "summary": "Ping the service and get 200 Ok response to make sure application is up and running",
                "operationId": "Ping",
                "responses": {
                    "200": {
                        "description": "Pong",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "calc.Input": {
            "type": "object",
            "required": [
                "firstNumber",
                "secondNumber"
            ],
            "properties": {
                "firstNumber": {
                    "type": "number",
                    "example": 1.2
                },
                "secondNumber": {
                    "type": "number",
                    "example": 3.4
                }
            }
        },
        "calc.Output": {
            "type": "object",
            "required": [
                "result"
            ],
            "properties": {
                "result": {
                    "type": "number",
                    "example": 4.6
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
